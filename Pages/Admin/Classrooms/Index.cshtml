@page
@model ClassroomReservationSystem.Pages.Admin.Classrooms.IndexModel
@{
    ViewData["Title"] = "Activity Feedback";
}

<style>
    .required::after {
        content: " *";
        color: red;
    }
</style>

<div class="container my-4">
<div class="d-flex justify-content-between align-items-center mb-3">
    <form method="get" class="d-flex gap-2">
        <div class="input-group">
            <input type="text" name="Filter" value="@Model.Filter" class="form-control"
                placeholder="Search by classroom name..." />
            <input type="hidden" name="PageNumber" value="1" />
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#createClassroomModal">
        <i class="bi bi-plus-circle me-1"></i> Create New Classroom
    </button>
</div>

<table class="table table-striped table-hover align-middle mb-0">
    <thead>
        <tr>
            <th>Classroom Name</th>
            <th>Capacity</th>
            <th>
                @{
                    string newSort = Model.SortOrder == "rating_desc" ? "rating_asc" : "rating_desc";
                }
                <a asp-page="./Index" asp-route-PageNumber="1" asp-route-Filter="@Model.Filter"
                    asp-route-SortOrder="@newSort">
                    Rating
                    @if (Model.SortOrder == "rating_desc")
                    {
                        <span>↓</span>
                    }
                    else if (Model.SortOrder == "rating_asc")
                    {
                        <span>↑</span>
                    }
                </a>
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ClassroomViewModels)
        {
            <tr>
                <td>@item.Classroom.Name</td>
                <td>@item.Classroom.Capacity</td>
                <td>
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Round(item.AverageRating))
                        {
                            <span class="text-warning">★</span>
                        }
                        else
                        {
                            <span class="text-muted">☆</span>
                        }
                    }
                    (@item.AverageRating.ToString("F1"))
                </td>
                <td>
                    <button type="button" 
                            class="btn btn-warning btn-sm" 
                            data-bs-toggle="modal" 
                            data-bs-target="#classroomDetailsModal" 
                            data-classroom-id="@item.Classroom.Id">
                        <i class="bi bi-info-circle me-1"></i> Details
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
@if (Model.TotalPages > 1)
{
    <nav class="d-flex justify-content-center mt-3">
        <ul class="pagination">

            <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
                <a class="page-link"
                   href="?PageNumber=@(Model.PageNumber - 1)&Filter=@Model.Filter&SortOrder=@Model.SortOrder"
                   aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                    <a class="page-link"
                       href="?PageNumber=@i&Filter=@Model.Filter&SortOrder=@Model.SortOrder">@i</a>
                </li>
            }

            <li class="page-item @(Model.PageNumber == Model.TotalPages ? "disabled" : "")">
                <a class="page-link"
                   href="?PageNumber=@(Model.PageNumber + 1)&Filter=@Model.Filter&SortOrder=@Model.SortOrder"
                   aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}
</div>

<div class="modal fade" id="classroomDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title"id="classroomName"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="loading" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <div id="detailsContent" class="d-none">
                    <div class="mb-4">
                        <h5 class="border-bottom pb-2">Feedback</h5>
                        <div id="feedbacksList"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="createClassroomModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Add New Classroom</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" asp-page-handler="Create">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label required">Classroom Name</label>
                        <input type="text" name="Name" class="form-control" required 
                               placeholder="Ex: L111" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label required">Capacity</label>
                        <input type="number" name="Capacity" class="form-control" required 
                               min="1" placeholder="Maximum number of people in the classroom" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-plus-circle me-1"></i> Create
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('classroomDetailsModal');
            const loading = document.getElementById('loading');
            const content = document.getElementById('detailsContent');
            const nameElement = document.getElementById('classroomName');
            const feedbacksList = document.getElementById('feedbacksList');

            modal.addEventListener('show.bs.modal', async function (event) {
                const button = event.relatedTarget;
                const classroomId = button.getAttribute('data-classroom-id');
                
                loading.classList.remove('d-none');
                content.classList.add('d-none');
                
                try {
                    const response = await fetch(`?handler=ClassroomDetails&id=${classroomId}`, {
                        headers: {
                            'Accept': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        nameElement.textContent = data.classroom.name;
                        
                        if (data.feedbacks && data.feedbacks.length > 0) {
                            feedbacksList.innerHTML = data.feedbacks.map(feedback => `
                                <div class="card mb-3 shadow-sm">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <div>
                                                ${Array(5).fill(0).map((_, i) => 
                                                    i < feedback.rating 
                                                        ? '<span class="text-warning fs-5">★</span>'
                                                        : '<span class="text-muted fs-5">☆</span>'
                                                ).join('')}
                                            </div>
                                            <small class="text-muted fst-italic">
                                                ${new Date(feedback.createdDate).toLocaleString('en-US')}
                                            </small>
                                        </div>
                                        <p class="card-text mb-0">${feedback.comment}</p>
                                    </div>
                                </div>
                            `).join('');
                        } else {
                            feedbacksList.innerHTML = '<div class="alert alert-info">No evaluations have been made for this classroom yet.</div>';
                        }
                        
                        loading.classList.add('d-none');
                        content.classList.remove('d-none');
                    }
                } catch (error) {
                    feedbacksList.innerHTML = '<div class="alert alert-danger">An error occurred while loading the data.</div>';
                }
            });
        });
    </script>
    <script>
        const createForm = document.querySelector('#createClassroomModal form');
        if (createForm) {
            createForm.addEventListener('submit', function(e) {
                if (!this.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                this.classList.add('was-validated');
            });
        }
    </script>
}

